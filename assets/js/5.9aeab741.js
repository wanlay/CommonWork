(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{146:function(e,r,t){"use strict";t.r(r);var n=t(0),a=Object(n.a)({},(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("div",{staticClass:"content"},[e._m(0),e._m(1),t("p",[e._v('"通过 Docker, 开发者可以使用任何语言任何工具创建任何应用。“Dockerized” 的应用是完全可移植的，能在任何地方运行 - 不管是同事的 OS X 和 Windows 笔记本，或是在云端运行的 Ubuntu QA 服务，还是在虚拟机运行的 Red Hat 产品数据中心。')]),t("p",[e._v("Docker Hub 上有 13,000+ 的应用，开发者可以从中选取一个进行快速扩展开发。Docker 跟踪管理变更和依赖关系，让系统管理员能更容易理解开发人员是如何让应用运转起来的。而开发者可以通过 Docker Hub 的共有/私有仓库，构建他们的自动化编译，与其他合作者共享成果。")]),t("p",[e._v('Docker 帮助开发者更快地构建和发布高质量的应用。" -- '),t("a",{attrs:{href:"https://www.docker.com/what-docker/#copy1",target:"_blank",rel:"noopener noreferrer"}},[e._v("什么是 Docker"),t("OutboundLink")],1)]),e._m(2),t("p",[e._v("我用的是 "),t("a",{attrs:{href:"https://github.com/robbyrussell/oh-my-zsh",target:"_blank",rel:"noopener noreferrer"}},[e._v("Oh My Zsh"),t("OutboundLink")],1),e._v(" ，和 "),t("a",{attrs:{href:"https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins#docker",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker 插件"),t("OutboundLink")],1),e._v(" ，它可以自动补全 docker 的命令。YMMV。")]),e._m(3),t("p",[e._v("3.10.x 内核是能运行 Docker 的"),t("a",{attrs:{href:"https://docs.docker.com/engine/installation/binaries/#check-kernel-dependencies",target:"_blank",rel:"noopener noreferrer"}},[e._v("最低要求"),t("OutboundLink")],1),e._v("。")]),e._m(4),t("p",[e._v("10.8 “Mountain Lion” 或者更新的版本。")]),e._m(5),e._m(6),t("p",[e._v("Docker 提供了快速安装脚本：")]),e._m(7),t("p",[e._v("如果你不想执行一个不明不白的 shell 脚本，那么请看"),t("a",{attrs:{href:"https://docs.docker.com/engine/installation/linux/",target:"_blank",rel:"noopener noreferrer"}},[e._v("安装教程"),t("OutboundLink")],1),e._v("，选择你在用的发行版本。")]),t("p",[e._v("如果你是一个 Docker 超新手，那么我建议你先去看看"),t("a",{attrs:{href:"https://docs.docker.com/engine/getstarted/",target:"_blank",rel:"noopener noreferrer"}},[e._v("系列教程"),t("OutboundLink")],1),e._v("。")]),e._m(8),t("p",[e._v("下载和安装 "),t("a",{attrs:{href:"https://docs.docker.com/toolbox/overview/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker Toolbox"),t("OutboundLink")],1),e._v("。"),t("a",{attrs:{href:"https://docs.docker.com/docker-for-mac/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker For Mac"),t("OutboundLink")],1),e._v(" 很赞，但是它的安装和 VirtualBox 不太一样。详情请查阅"),t("a",{attrs:{href:"https://docs.docker.com/docker-for-mac/docker-toolbox/",target:"_blank",rel:"noopener noreferrer"}},[e._v("比较"),t("OutboundLink")],1),e._v("。")]),t("blockquote",[t("p",[t("strong",[e._v("注意")]),e._v(" 如果你已经有安装了 docker toolbox，那么你可能会考虑通过 "),t("a",{attrs:{href:"https://docs.docker.com/machine/install-machine/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker Machine"),t("OutboundLink")],1),e._v(" 安装包(不管是从 URL 或是 "),t("code",[e._v("docker-machine upgrade default")]),e._v(")升级，它确实会完成 docker-machine 的升级。但是它不会帮你升级 docker 版本 -- "),t("code",[e._v("docker-machine")]),e._v(" 变成了 "),t("code",[e._v("1.10.3")]),e._v(" 而 "),t("code",[e._v("docker")]),e._v(" 还是原来的 "),t("code",[e._v("1.8.3")]),e._v(" 或者你之前的什么版本。")]),t("p",[e._v("所以你最好是通过 Docker Toolbox DMG 文件来升级，它会一次性的帮你处理好所有的升级。")])]),t("p",[e._v("安装好 Docker Toolbox 之后，通过 VirtualBox provider 安装带 Docker Machine 的 VM:")]),e._m(9),t("p",[e._v("然后启动 container:")]),e._m(10),t("p",[e._v("好了，你现在有了一个运行中的 Docker container 了。")]),t("p",[e._v("如果你是一个 Docker 超新手，那么我建议你先去看看"),t("a",{attrs:{href:"https://docs.docker.com/engine/getstarted/",target:"_blank",rel:"noopener noreferrer"}},[e._v("系列教程"),t("OutboundLink")],1),e._v("。")]),e._m(11),t("p",[t("a",{attrs:{href:"http://etherealmind.com/basics-docker-containers-hypervisors-coreos/",target:"_blank",rel:"noopener noreferrer"}},[e._v("最基本的 Docker 进程"),t("OutboundLink")],1),e._v("。容器(Container)之于虚拟机(Virtual Machine)就好比线程之于进程。或者你可以把他们想成是 chroots on steroids。")]),e._m(12),t("ul",[t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/create",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("docker create")]),t("OutboundLink")],1),e._v(" 创建一个容器但是不启动。")]),t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/rename/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("docker rename")]),t("OutboundLink")],1),e._v(" 允许重命名容器。")]),t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/run",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("docker run")]),t("OutboundLink")],1),e._v(" 在同一个操作中创建并启动一个容器。")]),t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/rm",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("docker rm")]),t("OutboundLink")],1),e._v(" 删除容器。")]),t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/update/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("docker update")]),t("OutboundLink")],1),e._v(" 更新容器的资源限制。")])]),e._m(13),t("p",[e._v("如果你想映射宿主(host)的一个文件夹到 docker 容器，"),t("code",[e._v("docker run -v $HOSTDIR:$DOCKERDIR")]),e._v("。参考 "),t("a",{attrs:{href:"https://github.com/wsargent/docker-cheat-sheet/#volumes",target:"_blank",rel:"noopener noreferrer"}},[e._v("Volumes"),t("OutboundLink")],1),e._v("。")]),e._m(14),t("p",[e._v("在 docker 1.10 中还有一个 "),t("a",{attrs:{href:"https://docs.docker.com/engine/admin/logging/overview/",target:"_blank",rel:"noopener noreferrer"}},[e._v("logging driver"),t("OutboundLink")],1),e._v("，每个容器可以独立使用。如果你想执行 docker 并带上自定义日志驱动，这样 "),t("code",[e._v("docker run --log-driver=syslog")])]),e._m(15),t("ul",[t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/start",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("docker start")]),t("OutboundLink")],1),e._v(" 启动容器。")]),t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/stop",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("docker stop")]),t("OutboundLink")],1),e._v(" 停止运行中的容器。")]),t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/restart",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("docker restart")]),t("OutboundLink")],1),e._v(" 停止之后再启动容器。")]),t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/pause/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("docker pause")]),t("OutboundLink")],1),e._v(' 暂停运行中的容器，将其 "冻结" 在当前状态。')]),t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/unpause/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("docker unpause")]),t("OutboundLink")],1),e._v(" 结束容器暂停状态。")]),t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/wait",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("docker wait")]),t("OutboundLink")],1),e._v(" 阻塞，到运行中的容器停止为止。")]),t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/kill",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("docker kill")]),t("OutboundLink")],1),e._v(" 向运行中容器发送 SIGKILL 指令。")]),t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/attach",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("docker attach")]),t("OutboundLink")],1),e._v(" 链接到运行中容器。")])]),t("p",[e._v("如果你想整合容器到"),t("a",{attrs:{href:"https://docs.docker.com/engine/admin/host_integration/",target:"_blank",rel:"noopener noreferrer"}},[e._v("宿主进程管理(host process manager)"),t("OutboundLink")],1),e._v("，那么以 "),t("code",[e._v("-r=false")]),e._v(" 启动守护进程(daemon)然后使用 "),t("code",[e._v("docker start -a")]),e._v("。")]),e._m(16),t("p",[e._v("故障 docker 实例的重启策略在"),t("a",{attrs:{href:"http://container42.com/2014/09/30/docker-restart-policies/",target:"_blank",rel:"noopener noreferrer"}},[e._v("这里"),t("OutboundLink")],1),e._v("。")]),e._m(17),t("p",[e._v("你可以限制 CPU，包括使用所有 CPU 的百分比，或者使用特定内核数。")]),t("p",[e._v("比如，你可以设置 "),t("a",{attrs:{href:"https://docs.docker.com/engine/reference/run/#/cpu-share-constraint",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("cpu-shares")]),t("OutboundLink")],1),e._v(" 。这个设置看起来有点奇怪 -- 1024 的意思是 100% CPU，因此如果你希望容器使用全体 CPU 内核的 50%，应将其设置为 512。更多信息，请查阅 https://goldmann.pl/blog/2014/09/11/resource-management-in-docker/#_cpu :")]),e._m(18),t("p",[e._v("你可以只对某些 CPU 内核使用 "),t("a",{attrs:{href:"https://docs.docker.com/engine/reference/run/#/cpuset-constraint",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("cpuset-cpus")]),t("OutboundLink")],1),e._v("]。请参阅 https://agileek.github.io/docker/2014/08/06/docker-cpuset/ 获取更多细节以及一些不错的视频:")]),e._m(19),e._m(20),e._m(21),t("p",[e._v("你同样可以在 Docker 设置"),t("a",{attrs:{href:"https://docs.docker.com/engine/reference/run/#/user-memory-constraints",target:"_blank",rel:"noopener noreferrer"}},[e._v("内存限制"),t("OutboundLink")],1),e._v(" :")]),e._m(22),e._m(23),e._m(24),t("p",[e._v("如需要挂载基于 FUSE 文件系统，你需要同时结合 --cap-add 和 --device 使用:")]),e._m(25),t("p",[e._v("授予对单个设备访问权限:")]),e._m(26),t("p",[e._v("授予所有设备访问权限:")]),e._m(27),t("p",[e._v("有关容器特权的更多详情请参考"),t("a",{attrs:{href:"https://docs.docker.com/engine/reference/run/#/runtime-privilege-and-linux-capabilities",target:"_blank",rel:"noopener noreferrer"}},[e._v("这里"),t("OutboundLink")],1)]),e._m(28),t("ul",[t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/ps",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("docker ps")]),t("OutboundLink")],1),e._v(" 查看运行中的所有容器。")]),t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/logs",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("docker logs")]),t("OutboundLink")],1),e._v(" 从容器中获取日志。(你也可以使用自定义日志驱动，不过在 1.10 中，它只支持 "),t("code",[e._v("json-file")]),e._v(" 和 "),t("code",[e._v("journald")]),e._v(")")]),t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/inspect",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("docker inspect")]),t("OutboundLink")],1),e._v(" 查看某个容器的所有信息(包括 IP 地址)。")]),t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/events",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("docker events")]),t("OutboundLink")],1),e._v(" 从容器中获取事件(events)。")]),t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/port",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("docker port")]),t("OutboundLink")],1),e._v(" 查看容器的公开端口。")]),t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/top",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("docker top")]),t("OutboundLink")],1),e._v(" 查看容器中活动进程。")]),t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/stats",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("docker stats")]),t("OutboundLink")],1),e._v(" 查看容器的资源使用情况统计信息。")]),t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/diff",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("docker diff")]),t("OutboundLink")],1),e._v(" 查看容器的 FS 中有变化文件信息。")])]),e._m(29),e._m(30),e._m(31),t("ul",[t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/cp",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("docker cp")]),t("OutboundLink")],1),e._v(" 在容器和本地文件系统之间复制文件或文件夹。")]),t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/export",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("docker export")]),t("OutboundLink")],1),e._v(" 将容器的文件系统切换为压缩包(tarball archive stream)输出到 STDOUT。")])]),e._m(32),t("ul",[t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/exec",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("docker exec")]),t("OutboundLink")],1),e._v(" 在容器中执行命令。")])]),e._m(33),e._m(34),t("p",[e._v("镜像是"),t("a",{attrs:{href:"https://docs.docker.com/engine/understanding-docker/#how-does-a-docker-image-work",target:"_blank",rel:"noopener noreferrer"}},[e._v("docker 容器的模板"),t("OutboundLink")],1),e._v("。")]),e._m(35),t("ul",[t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/images",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("docker images")]),t("OutboundLink")],1),e._v(" 查看所有镜像。")]),t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/import",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("docker import")]),t("OutboundLink")],1),e._v(" 从压缩文件中创建镜像。")]),t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/build",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("docker build")]),t("OutboundLink")],1),e._v(" 从 Dockerfile 创建镜像。")]),t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/commit",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("docker commit")]),t("OutboundLink")],1),e._v(" 为容器创建镜像，如果容器正在运行则会临时暂停。")]),t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/rmi",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("docker rmi")]),t("OutboundLink")],1),e._v(" 删除镜像。")]),t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/load",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("docker load")]),t("OutboundLink")],1),e._v(" 通过 STDIN 从压缩包加载镜像，包括镜像和标签(images and tags) (0.7 起).")]),t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/save",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("docker save")]),t("OutboundLink")],1),e._v(" 通过 STDOUT 保存镜像到压缩包，包括所有的父层，标签和版本(parent layers, tags & versions) (0.7 起).")])]),e._m(36),t("ul",[t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/history",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("docker history")]),t("OutboundLink")],1),e._v(" 查看镜像历史记录。")]),t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/tag",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("docker tag")]),t("OutboundLink")],1),e._v(" 给镜像命名打标(tags) (本地或者仓库)。")])]),e._m(37),t("p",[e._v("虽然你可以用 "),t("code",[e._v("docker rmi")]),e._v(" 命令来删除指定的镜像，但是这里有个称为 "),t("a",{attrs:{href:"https://github.com/spotify/docker-gc",target:"_blank",rel:"noopener noreferrer"}},[e._v("docker-gc"),t("OutboundLink")],1),e._v(" 的工具，它可以以一种安全的方式，清理掉那些不再被任何容器使用的镜像。")]),e._m(38),t("p",[e._v("从文件中加载镜像:")]),e._m(39),t("p",[e._v("保存既有镜像:")]),e._m(40),e._m(41),t("p",[e._v("从文件中将容器作为镜像导入:")]),e._m(42),t("p",[e._v("导出既有容器:")]),e._m(43),e._m(44),e._m(45),e._m(46),t("p",[e._v("Docker 有"),t("a",{attrs:{href:"https://docs.docker.com/engine/userguide/networking/",target:"_blank",rel:"noopener noreferrer"}},[e._v("网络(networks)"),t("OutboundLink")],1),e._v("功能。我并不是很了解它，所以这是一个扩展本文的好地方。这里有篇笔记指出，这是一种可以不使用端口来达成 docker 容器间通信的好方法。详情查阅"),t("a",{attrs:{href:"https://docs.docker.com/engine/userguide/networking/work-with-networks/",target:"_blank",rel:"noopener noreferrer"}},[e._v("通过网络来工作"),t("OutboundLink")],1),e._v("。")]),e._m(47),t("ul",[t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/network_create/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("docker network create")]),t("OutboundLink")],1)]),t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/network_rm/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("docker network rm")]),t("OutboundLink")],1)])]),e._m(48),t("ul",[t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/network_ls/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("docker network ls")]),t("OutboundLink")],1)]),t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/network_inspect/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("docker network inspect")]),t("OutboundLink")],1)])]),e._m(49),t("ul",[t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/network_connect/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("docker network connect")]),t("OutboundLink")],1)]),t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/network_disconnect/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("docker network disconnect")]),t("OutboundLink")],1)])]),t("p",[e._v("你可以为"),t("a",{attrs:{href:"https://blog.jessfraz.com/post/ips-for-all-the-things/",target:"_blank",rel:"noopener noreferrer"}},[e._v("容器指定 IP 地址"),t("OutboundLink")],1),e._v(":")]),e._m(50),e._m(51),t("p",[e._v("仓库(repository)是*被托管(hosted)*的已命名镜像(tagged images)集合，这组镜像用于构建容器文件系统。")]),t("p",[e._v("仓管中心(registry)是一个"),t("em",[e._v("托管服务(host)")]),e._v(" -- 一个服务，用于存储仓库和提供 HTTP API，以便"),t("a",{attrs:{href:"https://docs.docker.com/engine/tutorials/dockerrepos/",target:"_blank",rel:"noopener noreferrer"}},[e._v("管理上传和下载仓库"),t("OutboundLink")],1),e._v("。")]),t("p",[e._v("Docker.com 把它自己的"),t("a",{attrs:{href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("索引"),t("OutboundLink")],1),e._v("托管到了它的仓管中心，那里有数量众多的仓库。不过话虽如此，这个仓管中心"),t("a",{attrs:{href:"https://titanous.com/posts/docker-insecurity",target:"_blank",rel:"noopener noreferrer"}},[e._v("并没有很好的验证镜像"),t("OutboundLink")],1),e._v("，所以如果你很担心安全问题的话，请尽量避免使用它。")]),t("ul",[t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/login",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("docker login")]),t("OutboundLink")],1),e._v(" 登入仓管中心。")]),t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/logout",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("docker logout")]),t("OutboundLink")],1),e._v(" 登出仓管中心。")]),t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/search",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("docker search")]),t("OutboundLink")],1),e._v(" 从仓管中心检索镜像。")]),t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/pull",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("docker pull")]),t("OutboundLink")],1),e._v(" 从仓管中心拉去镜像到本地。")]),t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/push",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("docker push")]),t("OutboundLink")],1),e._v(" 从本地推送镜像到仓管中心。")])]),e._m(52),t("p",[e._v("你可以创立一个本地的仓管中心，通过使用 "),t("a",{attrs:{href:"https://github.com/docker/distribution",target:"_blank",rel:"noopener noreferrer"}},[e._v("docker distribution"),t("OutboundLink")],1),e._v(" 工程，细节请查看 "),t("a",{attrs:{href:"https://github.com/docker/docker.github.io/blob/master/registry/deploying.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("本地发布(local deploy)"),t("OutboundLink")],1),e._v(" 介绍。")]),t("p",[e._v("也可以参考 "),t("a",{attrs:{href:"https://groups.google.com/a/dockerproject.org/forum/#!forum/distribution",target:"_blank",rel:"noopener noreferrer"}},[e._v("邮件列表"),t("OutboundLink")],1),e._v("。")]),e._m(53),t("p",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/builder/",target:"_blank",rel:"noopener noreferrer"}},[e._v("配置文件"),t("OutboundLink")],1),e._v("。当你执行 "),t("code",[e._v("docker build")]),e._v(" 的时候会根据该配置文件设置 Docker 容器。远优于使用 "),t("code",[e._v("docker commit")]),e._v("。")]),t("p",[e._v("下面是一些常用的编写 Dockerfile 的编辑器和语法高亮模块︰")]),t("ul",[t("li",[e._v("如果你使用 "),t("a",{attrs:{href:"http://jedit.org",target:"_blank",rel:"noopener noreferrer"}},[e._v("jEdit"),t("OutboundLink")],1),e._v("，我为 "),t("a",{attrs:{href:"https://github.com/wsargent/jedit-docker-mode",target:"_blank",rel:"noopener noreferrer"}},[e._v("Dockerfile"),t("OutboundLink")],1),e._v(" 做了个语法高亮模块。")]),t("li",[t("a",{attrs:{href:"https://packagecontrol.io/packages/Dockerfile%20Syntax%20Highlighting",target:"_blank",rel:"noopener noreferrer"}},[e._v("Sublime Text 2"),t("OutboundLink")],1)]),t("li",[t("a",{attrs:{href:"https://atom.io/packages/language-docker",target:"_blank",rel:"noopener noreferrer"}},[e._v("Atom"),t("OutboundLink")],1)]),t("li",[t("a",{attrs:{href:"https://github.com/ekalinin/Dockerfile.vim",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vim"),t("OutboundLink")],1)]),t("li",[t("a",{attrs:{href:"https://github.com/spotify/dockerfile-mode",target:"_blank",rel:"noopener noreferrer"}},[e._v("Emacs"),t("OutboundLink")],1)]),t("li",[t("a",{attrs:{href:"https://github.com/docker/docker/tree/master/contrib/syntax/textmate",target:"_blank",rel:"noopener noreferrer"}},[e._v("TextMate"),t("OutboundLink")],1)]),t("li",[e._v("如果要找更全面的关于编辑器或者 IDE 的内容，请看 "),t("a",{attrs:{href:"https://domeide.github.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("当 Docker 遇上 IDE"),t("OutboundLink")],1)])]),e._m(54),t("ul",[t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/builder/#dockerignore-file",target:"_blank",rel:"noopener noreferrer"}},[e._v(".dockerignore"),t("OutboundLink")],1)]),t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/builder/#from",target:"_blank",rel:"noopener noreferrer"}},[e._v("FROM"),t("OutboundLink")],1),e._v(" 为其他指令设置基础镜像(Base Image)。")]),t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/builder/#maintainer",target:"_blank",rel:"noopener noreferrer"}},[e._v("MAINTAINER"),t("OutboundLink")],1),e._v(" 为生成的镜像设置作者字段。")]),t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/builder/#run",target:"_blank",rel:"noopener noreferrer"}},[e._v("RUN"),t("OutboundLink")],1),e._v(" 在当前镜像的基础上生成一个新层并执行命令。")]),t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/builder/#cmd",target:"_blank",rel:"noopener noreferrer"}},[e._v("CMD"),t("OutboundLink")],1),e._v(" 设置容器默认执行命令。")]),t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/builder/#expose",target:"_blank",rel:"noopener noreferrer"}},[e._v("EXPOSE"),t("OutboundLink")],1),e._v(" 告知 Docker 容器在运行时所要监听的网络端口。注意：并没有实际上将端口设置为可访问。")]),t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/builder/#env",target:"_blank",rel:"noopener noreferrer"}},[e._v("ENV"),t("OutboundLink")],1),e._v(" 设置环境变量。")]),t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/builder/#add",target:"_blank",rel:"noopener noreferrer"}},[e._v("ADD"),t("OutboundLink")],1),e._v(" 将文件，文件夹或者远程文件复制到容器中。缓存无效。尽量用 "),t("code",[e._v("COPY")]),e._v(" 代替 "),t("code",[e._v("ADD")]),e._v("。")]),t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/builder/#copy",target:"_blank",rel:"noopener noreferrer"}},[e._v("COPY"),t("OutboundLink")],1),e._v(" 将文件或文件夹复制到容器中。")]),t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/builder/#entrypoint",target:"_blank",rel:"noopener noreferrer"}},[e._v("ENTRYPOINT"),t("OutboundLink")],1),e._v(" 将一个容器设置为可执行。")]),t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/builder/#volume",target:"_blank",rel:"noopener noreferrer"}},[e._v("VOLUME"),t("OutboundLink")],1),e._v(" 为外部挂载卷标或其他容器设置挂载点(mount point)。")]),t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/builder/#user",target:"_blank",rel:"noopener noreferrer"}},[e._v("USER"),t("OutboundLink")],1),e._v(" 设置执行 RUN / CMD / ENTRYPOINT 命令的用户名。")]),t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/builder/#workdir",target:"_blank",rel:"noopener noreferrer"}},[e._v("WORKDIR"),t("OutboundLink")],1),e._v(" 设置工作目录。")]),t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/builder/#arg",target:"_blank",rel:"noopener noreferrer"}},[e._v("ARG"),t("OutboundLink")],1),e._v(" 定义编译时(build-time)变量。")]),t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/builder/#onbuild",target:"_blank",rel:"noopener noreferrer"}},[e._v("ONBUILD"),t("OutboundLink")],1),e._v(" 添加触发指令，当该镜像被作为其他镜像的基础镜像时该指令会被触发。")]),t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/builder/#stopsignal",target:"_blank",rel:"noopener noreferrer"}},[e._v("STOPSIGNAL"),t("OutboundLink")],1),e._v(" 设置通过系统向容器发出退出指令。")]),t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/userguide/labels-custom-metadata/",target:"_blank",rel:"noopener noreferrer"}},[e._v("LABEL"),t("OutboundLink")],1),e._v(" 将键值对元数据(key/value metadata)应用到你的镜像，容器，或者守护进程。")])]),e._m(55),t("ul",[t("li",[t("a",{attrs:{href:"http://flux7.com/blogs/docker/docker-tutorial-series-part-3-automation-is-the-word-using-dockerfile/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Flux7's Dockerfile Tutorial"),t("OutboundLink")],1)])]),e._m(56),t("ul",[t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/builder/#dockerfile-examples",target:"_blank",rel:"noopener noreferrer"}},[e._v("Examples"),t("OutboundLink")],1)]),t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Best practices for writing Dockerfiles"),t("OutboundLink")],1)]),t("li",[t("a",{attrs:{href:"http://crosbymichael.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Michael Crosby"),t("OutboundLink")],1),e._v(" 还有更多的 "),t("a",{attrs:{href:"http://crosbymichael.com/dockerfile-best-practices.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Dockerfiles best practices"),t("OutboundLink")],1),e._v(" / "),t("a",{attrs:{href:"http://crosbymichael.com/dockerfile-best-practices-take-2.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("take 2"),t("OutboundLink")],1)]),t("li",[t("a",{attrs:{href:"http://jonathan.bergknoff.com/journal/building-good-docker-images",target:"_blank",rel:"noopener noreferrer"}},[e._v("Building Good Docker Images"),t("OutboundLink")],1),e._v(" / "),t("a",{attrs:{href:"http://jonathan.bergknoff.com/journal/building-better-docker-images",target:"_blank",rel:"noopener noreferrer"}},[e._v("Building Better Docker Images"),t("OutboundLink")],1)]),t("li",[t("a",{attrs:{href:"https://speakerdeck.com/garethr/managing-container-configuration-with-metadata",target:"_blank",rel:"noopener noreferrer"}},[e._v("Managing Container Configuration with Metadata"),t("OutboundLink")],1)])]),e._m(57),t("p",[e._v("Docker 的版本化文件系统是基于层的。就像"),t("a",{attrs:{href:"https://docs.docker.com/engine/userguide/storagedriver/imagesandcontainers/",target:"_blank",rel:"noopener noreferrer"}},[e._v("git的提交或文件变更系统"),t("OutboundLink")],1),e._v("一样。")]),t("p",[e._v("注意: 如果你使用 "),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Aufs",target:"_blank",rel:"noopener noreferrer"}},[e._v("aufs"),t("OutboundLink")],1),e._v(" 作为你的文件系统，当删除一个容器的时候，Docker 并不一定能成功删除的文件卷标！更多详细信息请参阅 "),t("a",{attrs:{href:"https://github.com/docker/docker/pull/8484",target:"_blank",rel:"noopener noreferrer"}},[e._v("PR 8484"),t("OutboundLink")],1),e._v("。")]),e._m(58),t("p",[e._v("链接(Links)"),t("a",{attrs:{href:"https://docs.docker.com/userguide/dockerlinks/",target:"_blank",rel:"noopener noreferrer"}},[e._v("通过 TCP/IP 端口"),t("OutboundLink")],1),e._v("实现了 Docker 容器之间的通讯。"),t("a",{attrs:{href:"https://docs.docker.com/examples/running_redis_service/",target:"_blank",rel:"noopener noreferrer"}},[e._v("链接到 Redis"),t("OutboundLink")],1),e._v(" 和 "),t("a",{attrs:{href:"https://blogs.atlassian.com/2013/11/docker-all-the-things-at-atlassian-automation-and-wiring/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Atlassian"),t("OutboundLink")],1),e._v(" 是两个可用的例子。你还可以"),t("a",{attrs:{href:"https://docs.docker.com/engine/userguide/networking/default_network/dockerlinks/#/updating-the-etchosts-file",target:"_blank",rel:"noopener noreferrer"}},[e._v("通过 hostname 关联链接"),t("OutboundLink")],1),e._v("。")]),e._m(59),e._m(60),e._m(61),t("p",[e._v("然后，我们创建另外一个名为 LINKED 的容器:")]),e._m(62),t("p",[e._v("然后 CONTAINER 的端口和别名将会以如下的环境变量出现在 LINKED 中:")]),e._m(63),t("p",[e._v("之后你就可以通过这种方式来链接它了。")]),e._m(64),t("p",[e._v('通常，docker 服务之间的链接，是"服务发现"的一个子集，如果你打算在生产中大规模使用 Docker，这将是一个很大的问题。请参阅'),t("a",{attrs:{href:"https://www.digitalocean.com/community/tutorials/the-docker-ecosystem-service-discovery-and-distributed-configuration-stores",target:"_blank",rel:"noopener noreferrer"}},[e._v("The Docker Ecosystem: Service Discovery and Distributed Configuration Stores"),t("OutboundLink")],1),e._v("获得更多细节。")]),e._m(65),t("p",[e._v("Docker 的卷标(volumes)是一个"),t("a",{attrs:{href:"https://docs.docker.com/engine/tutorials/dockervolumes/",target:"_blank",rel:"noopener noreferrer"}},[e._v("free-floating 文件系统"),t("OutboundLink")],1),e._v("。它们不应该链接到特定的容器上。好的做法是如果可能，应当把卷标挂载到"),t("a",{attrs:{href:"https://medium.com/@ramangupta/why-docker-data-containers-are-good-589b3c6c749e",target:"_blank",rel:"noopener noreferrer"}},[e._v("纯数据容器(data-only containers)"),t("OutboundLink")],1),e._v("上。")]),e._m(66),t("ul",[t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/volume_create/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("docker volume create")]),t("OutboundLink")],1)]),t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/volume_rm/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("docker volume rm")]),t("OutboundLink")],1)])]),e._m(67),t("ul",[t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/volume_ls/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("docker volume ls")]),t("OutboundLink")],1)]),t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/volume_inspect/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("docker volume inspect")]),t("OutboundLink")],1)])]),t("p",[e._v("卷标在不能使用链接(只有 TCP/IP )的情况下非常有用。例如，如果你有两个 docker 实例需要通讯并在文件系统上留下记录。")]),e._m(68),t("p",[e._v("因为卷标是独立的文件系统，它们通常被用于存储各容器之间的瞬时状态。也就是说，你可以配置一个无状态临时容器，关掉之后，当你有第二个这种临时容器实例的时候，你可以从上一次保存的状态继续执行。")]),t("p",[e._v("查看"),t("a",{attrs:{href:"http://crosbymichael.com/advanced-docker-volumes.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("卷标进阶"),t("OutboundLink")],1),e._v("来获取更多细节。Container42 "),t("a",{attrs:{href:"http://container42.com/2014/11/03/docker-indepth-volumes/",target:"_blank",rel:"noopener noreferrer"}},[e._v("非常有用"),t("OutboundLink")],1),e._v("。")]),t("p",[e._v("你可以"),t("a",{attrs:{href:"https://docs.docker.com/engine/tutorials/dockervolumes/#mount-a-host-directory-as-a-data-volume",target:"_blank",rel:"noopener noreferrer"}},[e._v("将宿主 MacOS 的文件夹映射为 docker 卷标"),t("OutboundLink")],1),e._v(":")]),e._m(69),t("p",[e._v("你也可以用远程 NFS 卷标，如果你觉得你"),t("a",{attrs:{href:"https://docs.docker.com/engine/tutorials/dockervolumes/#/mount-a-shared-storage-volume-as-a-data-volume",target:"_blank",rel:"noopener noreferrer"}},[e._v("有足够勇气"),t("OutboundLink")],1),e._v("。")]),t("p",[e._v("可还可以考虑运行一个纯数据容器，像"),t("a",{attrs:{href:"http://container42.com/2013/12/16/persistent-volumes-with-docker-container-as-volume-pattern/",target:"_blank",rel:"noopener noreferrer"}},[e._v("这里"),t("OutboundLink")],1),e._v("所说的那样，提供可移植数据。")]),e._m(70),t("p",[e._v("通过宿主容器暴露输入端口是相当"),t("a",{attrs:{href:"https://docs.docker.com/engine/reference/run/#expose-incoming-ports",target:"_blank",rel:"noopener noreferrer"}},[e._v("繁琐，但有效"),t("OutboundLink")],1),e._v("的。")]),e._m(71),e._m(72),t("p",[e._v("你可以告诉 Docker 容器在运行时监听指定的网络端口，通过使用 "),t("a",{attrs:{href:"https://docs.docker.com/engine/reference/builder/#expose",target:"_blank",rel:"noopener noreferrer"}},[e._v("EXPOSE"),t("OutboundLink")],1),e._v(":")]),e._m(73),e._m(74),e._m(75),t("p",[e._v("如果你是在 Virtualbox 中运行 Docker，那么你需要转发端口(forward the port)，使用 "),t("a",{attrs:{href:"https://docs.vagrantup.com/v2/networking/forwarded_ports.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("forwarded_port"),t("OutboundLink")],1),e._v("。它可以用于在 Vagrantfile 上配置暴露端口段，这样你就可以动态的映射它们了:")]),e._m(76),e._m(77),e._m(78),e._m(79),t("p",[e._v("这里有一些最佳实践的总结，以及一些讨论:")]),t("ul",[t("li",[t("a",{attrs:{href:"http://gregoryszorc.com/blog/2014/10/16/the-rabbit-hole-of-using-docker-in-automated-tests/",target:"_blank",rel:"noopener noreferrer"}},[e._v("The Rabbit Hole of Using Docker in Automated Tests"),t("OutboundLink")],1)]),t("li",[t("a",{attrs:{href:"https://twitter.com/bridgetkromhout",target:"_blank",rel:"noopener noreferrer"}},[e._v("Bridget Kromhout"),t("OutboundLink")],1),e._v(" has a useful blog post on "),t("a",{attrs:{href:"http://sysadvent.blogspot.co.uk/2014/12/day-1-docker-in-production-reality-not.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("running Docker in production"),t("OutboundLink")],1),e._v(" at Dramafever.")]),t("li",[e._v("There's also a best practices "),t("a",{attrs:{href:"http://developers.lyst.com/devops/2014/12/08/docker/",target:"_blank",rel:"noopener noreferrer"}},[e._v("blog post"),t("OutboundLink")],1),e._v(" from Lyst.")]),t("li",[t("a",{attrs:{href:"https://engineering.salesforceiq.com/2013/11/05/a-docker-dev-environment-in-24-hours-part-2-of-2.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("A Docker Dev Environment in 24 Hours!"),t("OutboundLink")],1)]),t("li",[t("a",{attrs:{href:"https://tersesystems.com/2013/11/20/building-a-development-environment-with-docker/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Building a Development Environment With Docker"),t("OutboundLink")],1)]),t("li",[t("a",{attrs:{href:"https://samsaffron.com/archive/2013/11/07/discourse-in-a-docker-container",target:"_blank",rel:"noopener noreferrer"}},[e._v("Discourse in a Docker Container"),t("OutboundLink")],1)])]),e._m(80),t("p",[e._v("这节准备讨论一些关于 Docker 安全性的问题。"),t("a",{attrs:{href:"https://docs.docker.com/articles/security/",target:"_blank",rel:"noopener noreferrer"}},[e._v("安全"),t("OutboundLink")],1),e._v("这章讲述了更多细节。")]),t("p",[e._v("首先第一件事: Docker 是有 root 权限的。如果你在 "),t("code",[e._v("docker")]),e._v(" 组，那么你就有"),t("a",{attrs:{href:"http://reventlov.com/advisories/using-the-docker-command-to-root-the-host",target:"_blank",rel:"noopener noreferrer"}},[e._v(" root 权限"),t("OutboundLink")],1),e._v("。如果你暴露了 docker unix socket 给容器，意味着你赋予了容器"),t("a",{attrs:{href:"https://www.lvh.io/posts/dont-expose-the-docker-socket-not-even-to-a-container.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("宿主的 root 权限"),t("OutboundLink")],1),e._v("。Docker 不应该是你唯一的防御措施。")]),e._m(81),t("p",[e._v("为了最大的安全性，你应该会考虑在虚拟机上运行 Docker 。这是直接从 Docker 安全团队拿来的资料 -- "),t("a",{attrs:{href:"http://www.slideshare.net/jpetazzo/linux-containers-lxc-docker-and-security",target:"_blank",rel:"noopener noreferrer"}},[e._v("slides"),t("OutboundLink")],1),e._v(" / "),t("a",{attrs:{href:"http://www.projectatomic.io/blog/2014/08/is-it-safe-a-look-at-docker-and-security-from-linuxcon/",target:"_blank",rel:"noopener noreferrer"}},[e._v("notes"),t("OutboundLink")],1),e._v("。然后，可以使用 AppArmor / seccomp / SELinux / grsec 之类的来"),t("a",{attrs:{href:"http://linux-audit.com/docker-security-best-practices-for-your-vessel-and-containers/",target:"_blank",rel:"noopener noreferrer"}},[e._v("限制容器的权限"),t("OutboundLink")],1),e._v("。更多细节，请查阅 "),t("a",{attrs:{href:"https://blog.docker.com/2016/02/docker-engine-1-10-security/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker 1.10 security features"),t("OutboundLink")],1),e._v("。")]),t("p",[e._v("Docker 镜像 id 属于"),t("a",{attrs:{href:"https://medium.com/@quayio/your-docker-image-ids-are-secrets-and-its-time-you-treated-them-that-way-f55e9f14c1a4",target:"_blank",rel:"noopener noreferrer"}},[e._v("敏感信息"),t("OutboundLink")],1),e._v(" 所以它不应该向外界公开。你应该把他们当成密码来对待。")]),t("p",[e._v("参考 "),t("a",{attrs:{href:"https://github.com/konstruktoid/Docker/blob/master/Security/CheatSheet.adoc",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker Security Cheat Sheet"),t("OutboundLink")],1),e._v("中 - 作者是 "),t("a",{attrs:{href:"https://github.com/konstruktoid",target:"_blank",rel:"noopener noreferrer"}},[e._v("Thomas Sjögren"),t("OutboundLink")],1),e._v(" - 关于如何提高容器安全的建议。")]),t("p",[e._v("下载"),t("a",{attrs:{href:"https://github.com/docker/docker-bench-security",target:"_blank",rel:"noopener noreferrer"}},[e._v("docker 安全测试脚本"),t("OutboundLink")],1),e._v("，下载"),t("a",{attrs:{href:"https://blog.docker.com/2015/05/understanding-docker-security-and-best-practices/",target:"_blank",rel:"noopener noreferrer"}},[e._v("白皮书"),t("OutboundLink")],1),e._v(" 以及订阅"),t("a",{attrs:{href:"https://www.docker.com/docker-security",target:"_blank",rel:"noopener noreferrer"}},[e._v("邮件列表"),t("OutboundLink")],1),e._v(" (不幸的是 Docker 并没有独立的邮件列表，只有 dev / user)。")]),t("p",[e._v("你应该远离那些使用编译版本 grsecurity / pax 的不稳定内核，比如 "),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Alpine_Linux",target:"_blank",rel:"noopener noreferrer"}},[e._v("Alpine Linux"),t("OutboundLink")],1),e._v("。如果在产品中用了 grsecurity ，那么你应该考虑使用有"),t("a",{attrs:{href:"https://grsecurity.net/business_support.php",target:"_blank",rel:"noopener noreferrer"}},[e._v("商业支持"),t("OutboundLink")],1),e._v("的"),t("a",{attrs:{href:"https://grsecurity.net/announce.php",target:"_blank",rel:"noopener noreferrer"}},[e._v("稳定版本"),t("OutboundLink")],1),e._v("，就像你对待 RedHat 那样。它要 $200 每月，对于你的运维预算来说不值一提。")]),t("p",[e._v("从 docker 1.11 开始，你可以轻松的限制在容器中可用的进程数，以防止 fork bombs。 这要求 linux 内核 >= 4.3 并且要在内核配置中打开 CGROUP_PIDS=y 。")]),e._m(82),t("p",[e._v("同时，从 docker 1.11 开始，你也可以限制进程有再获取新权限的能力了。该功能是 linux 内核从 version 3.5 开始就拥有的。你可以从"),t("a",{attrs:{href:"http://www.projectatomic.io/blog/2016/03/no-new-privs-docker/",target:"_blank",rel:"noopener noreferrer"}},[e._v("这篇博客"),t("OutboundLink")],1),e._v("中阅读到更多关于这方面的内容。")]),e._m(83),t("p",[e._v("参考 "),t("a",{attrs:{href:"http://container-solutions.com/content/uploads/2015/06/15.06.15_DockerCheatSheet_A2.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker Security Cheat Sheet"),t("OutboundLink")],1),e._v(" (它是个 PDF 版本，搞得非常难用，所以拷贝出来了) 的 "),t("a",{attrs:{href:"http://container-solutions.com/is-docker-safe-for-production/",target:"_blank",rel:"noopener noreferrer"}},[e._v("容器解決方案"),t("OutboundLink")],1),e._v(":")]),t("p",[e._v("关闭内部进程通讯:")]),e._m(84),t("p",[e._v("设置容器为只读:")]),e._m(85),t("p",[e._v("通过 hashsum 来验证卷标:")]),e._m(86),t("p",[e._v("设置卷标为只读:")]),e._m(87),t("p",[e._v("在 Dockerfile 中定义并运行一个用户，避免在容器中以 root 身份操作:")]),e._m(88),e._m(89),t("p",[e._v("还可以通过使用 "),t("a",{attrs:{href:"https://s3hh.wordpress.com/2013/07/19/creating-and-using-containers-without-privilege/",target:"_blank",rel:"noopener noreferrer"}},[e._v("user namespaces"),t("OutboundLink")],1),e._v(" -- 这已经是 1.10 内建功能了，但默认情况下是不启用的。")]),t("p",[e._v('要在 Ubuntu 15.10 中启用用户命名空间 ("remap the userns")，请'),t("a",{attrs:{href:"https://raesene.github.io/blog/2016/02/04/Docker-User-Namespaces/",target:"_blank",rel:"noopener noreferrer"}},[e._v("跟着这篇博客的例子"),t("OutboundLink")],1),e._v("来做。")]),e._m(90),t("ul",[t("li",[t("a",{attrs:{href:"https://youtu.be/04LOuMgNj9U",target:"_blank",rel:"noopener noreferrer"}},[e._v("Using Docker Safely"),t("OutboundLink")],1)]),t("li",[t("a",{attrs:{href:"https://youtu.be/KmxOXmPhZbk",target:"_blank",rel:"noopener noreferrer"}},[e._v("Securing your applications using Docker"),t("OutboundLink")],1)]),t("li",[t("a",{attrs:{href:"https://youtu.be/a9lE9Urr6AQ",target:"_blank",rel:"noopener noreferrer"}},[e._v("Container security: Do containers actually contain?"),t("OutboundLink")],1)])]),e._m(91),t("p",[e._v("Docker 的路线图提到关于"),t("a",{attrs:{href:"https://github.com/docker/docker/blob/master/ROADMAP.md#11-security",target:"_blank",rel:"noopener noreferrer"}},[e._v("seccomp 的支持"),t("OutboundLink")],1),e._v("。\n这里有个 AppArmor 策略生成器，叫做 "),t("a",{attrs:{href:"https://github.com/jfrazelle/bane",target:"_blank",rel:"noopener noreferrer"}},[e._v("bane"),t("OutboundLink")],1),e._v("，他们正在实现"),t("a",{attrs:{href:"https://github.com/docker/docker/issues/17142",target:"_blank",rel:"noopener noreferrer"}},[e._v("安全配置文件"),t("OutboundLink")],1),e._v("。")]),e._m(92),t("p",[e._v("来源:")]),t("ul",[t("li",[t("a",{attrs:{href:"http://sssslide.com/speakerdeck.com/bmorearty/15-docker-tips-in-5-minutes",target:"_blank",rel:"noopener noreferrer"}},[e._v("15 Docker Tips in 5 minutes"),t("OutboundLink")],1)])]),e._m(93),e._m(94),e._m(95),e._m(96),e._m(97),e._m(98),t("p",[e._v("或者安装 "),t("a",{attrs:{href:"https://stedolan.github.io/jq/",target:"_blank",rel:"noopener noreferrer"}},[e._v("jq"),t("OutboundLink")],1),e._v(":")]),e._m(99),t("p",[e._v("或者用"),t("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/inspect",target:"_blank",rel:"noopener noreferrer"}},[e._v("go 模板"),t("OutboundLink")],1)]),e._m(100),e._m(101),e._m(102),e._m(103),e._m(104),e._m(105),e._m(106),e._m(107),e._m(108),e._m(109),e._m(110),e._m(111),e._m(112),e._m(113),e._m(114),e._m(115),e._m(116),e._m(117),t("p",[e._v("Docker 1.9 开始:")]),e._m(118),e._m(119),e._m(120),e._m(121),t("h3",{attrs:{id:"docker-容器瘦身-intercity-博客"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-容器瘦身-intercity-博客","aria-hidden":"true"}},[e._v("#")]),e._v(" Docker 容器瘦身  "),t("a",{attrs:{href:"http://bit.ly/1Wwo61N",target:"_blank",rel:"noopener noreferrer"}},[e._v("Intercity 博客"),t("OutboundLink")],1)]),e._m(122),t("p",[e._v("这应当和其他 apt 命令在同一层中完成。\n否则，前面的层将会保持原有信息，而你的镜像则依旧臃肿。")]),e._m(123),e._m(124),e._m(125),e._m(126),e._m(127),e._m(128),t("p",[e._v("检查某个单独容器的 CPU, 内存, 和 网络 i/o 使用情况，你可以:")]),e._m(129),t("p",[e._v("按 id 列出所有的容器:")]),e._m(130),t("p",[e._v("按名称列出所有容器:")]),e._m(131),t("p",[e._v("按指定镜像名称列出所有容器:")]),e._m(132)])}),[function(){var e=this.$createElement,r=this._self._c||e;return r("h1",{attrs:{id:"docker-cheat-sheet"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#docker-cheat-sheet","aria-hidden":"true"}},[this._v("#")]),this._v(" Docker Cheat Sheet")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h2",{attrs:{id:"为何使用-docker"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#为何使用-docker","aria-hidden":"true"}},[this._v("#")]),this._v(" 为何使用 Docker")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h2",{attrs:{id:"系统环境"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#系统环境","aria-hidden":"true"}},[this._v("#")]),this._v(" 系统环境")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h3",{attrs:{id:"linux"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#linux","aria-hidden":"true"}},[this._v("#")]),this._v(" Linux")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h3",{attrs:{id:"macos"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#macos","aria-hidden":"true"}},[this._v("#")]),this._v(" MacOS")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h2",{attrs:{id:"安装"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#安装","aria-hidden":"true"}},[this._v("#")]),this._v(" 安装")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h3",{attrs:{id:"linux-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#linux-2","aria-hidden":"true"}},[this._v("#")]),this._v(" Linux")])},function(){var e=this.$createElement,r=this._self._c||e;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("curl -sSL https://get.docker.com/ | sh\n")])])])},function(){var e=this.$createElement,r=this._self._c||e;return r("h3",{attrs:{id:"mac-os-x"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#mac-os-x","aria-hidden":"true"}},[this._v("#")]),this._v(" Mac OS X")])},function(){var e=this.$createElement,r=this._self._c||e;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v('docker-machine create --driver=virtualbox default\ndocker-machine ls\neval "$(docker-machine env default)"\n')])])])},function(){var e=this.$createElement,r=this._self._c||e;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("docker run hello-world\n")])])])},function(){var e=this.$createElement,r=this._self._c||e;return r("h2",{attrs:{id:"容器-container"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#容器-container","aria-hidden":"true"}},[this._v("#")]),this._v(" 容器(Container)")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h3",{attrs:{id:"生命周期"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#生命周期","aria-hidden":"true"}},[this._v("#")]),this._v(" 生命周期")])},function(){var e=this.$createElement,r=this._self._c||e;return r("p",[this._v("如果你想要一个临时容器，"),r("code",[this._v("docker run --rm")]),this._v(" 会在容器停止之后删除它。")])},function(){var e=this.$createElement,r=this._self._c||e;return r("p",[this._v("如果你想同时删除和容器关联的 volumes ，那么在删除容器的时候必须包含 -v 选项，像这样 "),r("code",[this._v("docker rm -v")]),this._v("。")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h3",{attrs:{id:"启动和停止"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#启动和停止","aria-hidden":"true"}},[this._v("#")]),this._v(" 启动和停止")])},function(){var e=this.$createElement,r=this._self._c||e;return r("p",[this._v("如果你想通过宿主暴露容器的端口(ports)，请看"),r("a",{attrs:{href:"#exposing-ports"}},[this._v("暴露端口")]),this._v("一节。")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h4",{attrs:{id:"cpu-限制"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#cpu-限制","aria-hidden":"true"}},[this._v("#")]),this._v(" CPU 限制")])},function(){var e=this.$createElement,r=this._self._c||e;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("docker run -ti --c 512 agileek/cpuset-test\n")])])])},function(){var e=this.$createElement,r=this._self._c||e;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("docker run -ti --cpuset-cpus=0,4,6 agileek/cpuset-test\n")])])])},function(){var e=this.$createElement,r=this._self._c||e;return r("p",[this._v("注意，Docker 在容器内仍然可以"),r("strong",[this._v("看到")]),this._v("所有的 CPU -- 虽然它只是用了其中一部分。请查阅 https://github.com/docker/docker/issues/20770 获取更多细节。")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h4",{attrs:{id:"内存限制"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#内存限制","aria-hidden":"true"}},[this._v("#")]),this._v(" 内存限制")])},function(){var e=this.$createElement,r=this._self._c||e;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("docker run -it -m 300M ubuntu:14.04 /bin/bash\n")])])])},function(){var e=this.$createElement,r=this._self._c||e;return r("h4",{attrs:{id:"能力-capabilities"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#能力-capabilities","aria-hidden":"true"}},[this._v("#")]),this._v(" 能力(Capabilities)")])},function(){var e=this.$createElement,r=this._self._c||e;return r("p",[this._v("Linux 的 capability 可以通过使用 "),r("code",[this._v("cap-add")]),this._v(" 和 "),r("code",[this._v("cap-drop")]),this._v(" 设置。请参阅 https://docs.docker.com/engine/reference/run/#/runtime-privilege-and-linux-capabilities 获取更多细节。这有助于提高安全性。")])},function(){var e=this.$createElement,r=this._self._c||e;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("docker run --rm -it --cap-add SYS_ADMIN --device /dev/fuse sshfs\n")])])])},function(){var e=this.$createElement,r=this._self._c||e;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("docker run -it --device=/dev/ttyUSB0 debian bash\n")])])])},function(){var e=this.$createElement,r=this._self._c||e;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("docker run -it --privileged -v /dev/bus/usb:/dev/bus/usb debian bash\n")])])])},function(){var e=this.$createElement,r=this._self._c||e;return r("h3",{attrs:{id:"信息"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#信息","aria-hidden":"true"}},[this._v("#")]),this._v(" 信息")])},function(){var e=this.$createElement,r=this._self._c||e;return r("p",[r("code",[this._v("docker ps -a")]),this._v(" 查看所有容器，包括正在运行的和已停止的。")])},function(){var e=this.$createElement,r=this._self._c||e;return r("p",[r("code",[this._v("docker stats --all")]),this._v(" 显示正在运行的容器列表")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h3",{attrs:{id:"导入-导出"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#导入-导出","aria-hidden":"true"}},[this._v("#")]),this._v(" 导入 / 导出")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h3",{attrs:{id:"执行命令"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#执行命令","aria-hidden":"true"}},[this._v("#")]),this._v(" 执行命令")])},function(){var e=this.$createElement,r=this._self._c||e;return r("p",[this._v("比如，进入正在运行的容器，在名为 foo 的容器中打开一个新的 shell 进程: "),r("code",[this._v("docker exec -it foo /bin/bash")]),this._v(".")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h2",{attrs:{id:"镜像-images"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#镜像-images","aria-hidden":"true"}},[this._v("#")]),this._v(" 镜像(Images)")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h3",{attrs:{id:"生命周期-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#生命周期-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 生命周期")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h3",{attrs:{id:"信息-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#信息-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 信息")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h3",{attrs:{id:"清理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#清理","aria-hidden":"true"}},[this._v("#")]),this._v(" 清理")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h3",{attrs:{id:"加载-保存镜像"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#加载-保存镜像","aria-hidden":"true"}},[this._v("#")]),this._v(" 加载/保存镜像")])},function(){var e=this.$createElement,r=this._self._c||e;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("docker load < my_image.tar.gz\n")])])])},function(){var e=this.$createElement,r=this._self._c||e;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("docker save my_image:my_tag | gzip > my_image.tar.gz\n")])])])},function(){var e=this.$createElement,r=this._self._c||e;return r("h3",{attrs:{id:"导入-导出容器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#导入-导出容器","aria-hidden":"true"}},[this._v("#")]),this._v(" 导入/导出容器")])},function(){var e=this.$createElement,r=this._self._c||e;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("cat my_container.tar.gz | docker import - my_image:my_tag\n")])])])},function(){var e=this.$createElement,r=this._self._c||e;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("docker export my_container | gzip > my_container.tar.gz\n")])])])},function(){var e=this.$createElement,r=this._self._c||e;return r("h3",{attrs:{id:"加载被保存的镜像和导入作为镜像导出的容器之间的不同"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#加载被保存的镜像和导入作为镜像导出的容器之间的不同","aria-hidden":"true"}},[this._v("#")]),this._v(" 加载被保存的镜像和导入作为镜像导出的容器之间的不同")])},function(){var e=this.$createElement,r=this._self._c||e;return r("p",[this._v("通过 "),r("code",[this._v("load")]),this._v(" 命令来加载镜像，会创建一个新的镜像，并继承原镜像的所有历史。\n通过 "),r("code",[this._v("import")]),this._v(" 将容器作为镜像导入，也会创建一个新的镜像，但并不包含原镜像的历史，因此生成的镜像会比使用加载方式生成的镜像要小。")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h2",{attrs:{id:"网络-networks"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#网络-networks","aria-hidden":"true"}},[this._v("#")]),this._v(" 网络(Networks)")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h3",{attrs:{id:"生命周期-3"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#生命周期-3","aria-hidden":"true"}},[this._v("#")]),this._v(" 生命周期")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h3",{attrs:{id:"信息-3"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#信息-3","aria-hidden":"true"}},[this._v("#")]),this._v(" 信息")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h3",{attrs:{id:"链接"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#链接","aria-hidden":"true"}},[this._v("#")]),this._v(" 链接")])},function(){var e=this.$createElement,r=this._self._c||e;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("# 使用你自己的子网和网关创建一个桥接网络\ndocker network create --subnet 203.0.113.0/24 --gateway 203.0.113.254 iptastic\n\n# 基于以上创建的网络，运行一个nginx容器并指定ip\n$ docker run --rm -it --net iptastic --ip 203.0.113.2 nginx\n\n# 在其他地方使用curl访问这个ip（假设这是一个公网ip）\n$ curl 203.0.113.2\n")])])])},function(){var e=this.$createElement,r=this._self._c||e;return r("h2",{attrs:{id:"仓管中心和仓库-registry-repository"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#仓管中心和仓库-registry-repository","aria-hidden":"true"}},[this._v("#")]),this._v(" 仓管中心和仓库(Registry & Repository)")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h3",{attrs:{id:"本地仓管中心"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#本地仓管中心","aria-hidden":"true"}},[this._v("#")]),this._v(" 本地仓管中心")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h2",{attrs:{id:"dockerfile"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile","aria-hidden":"true"}},[this._v("#")]),this._v(" Dockerfile")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h3",{attrs:{id:"指令"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#指令","aria-hidden":"true"}},[this._v("#")]),this._v(" 指令")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h3",{attrs:{id:"教程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#教程","aria-hidden":"true"}},[this._v("#")]),this._v(" 教程")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h3",{attrs:{id:"例子"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#例子","aria-hidden":"true"}},[this._v("#")]),this._v(" 例子")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h2",{attrs:{id:"层-layers"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#层-layers","aria-hidden":"true"}},[this._v("#")]),this._v(" 层(Layers)")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h2",{attrs:{id:"链接-links"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#链接-links","aria-hidden":"true"}},[this._v("#")]),this._v(" 链接(Links)")])},function(){var e=this.$createElement,r=this._self._c||e;return r("p",[this._v("注意: 如果你希望容器之间"),r("strong",[this._v("只")]),this._v("通过链接进行通讯，在启动 docker 守护进程的时候请添加参数 "),r("code",[this._v("-icc=false")]),this._v(" 来禁用内部进程通讯。")])},function(){var e=this.$createElement,r=this._self._c||e;return r("p",[this._v("如果你有一个名为 CONTAINER 的容器(通过 "),r("code",[this._v("docker run --name CONTAINER")]),this._v(" 指定) 并且在 Dockerfile 中，它的端口暴露为:")])},function(){var e=this.$createElement,r=this._self._c||e;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("EXPOSE 1337\n")])])])},function(){var e=this.$createElement,r=this._self._c||e;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("docker run -d --link CONTAINER:ALIAS --name LINKED user/wordpress\n")])])])},function(){var e=this.$createElement,r=this._self._c||e;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("$ALIAS_PORT_1337_TCP_PORT\n$ALIAS_PORT_1337_TCP_ADDR\n")])])])},function(){var e=this.$createElement,r=this._self._c||e;return r("p",[this._v("要删除链接，通过命令 "),r("code",[this._v("docker rm --link")]),this._v("。")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h2",{attrs:{id:"卷标-volumes"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#卷标-volumes","aria-hidden":"true"}},[this._v("#")]),this._v(" 卷标(Volumes)")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h3",{attrs:{id:"生命周期-4"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#生命周期-4","aria-hidden":"true"}},[this._v("#")]),this._v(" 生命周期")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h3",{attrs:{id:"信息-4"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#信息-4","aria-hidden":"true"}},[this._v("#")]),this._v(" 信息")])},function(){var e=this.$createElement,r=this._self._c||e;return r("p",[this._v("你可以一次性将其挂载到多个 docker 容器上，通过 "),r("code",[this._v("docker run --volumes-from")]),this._v("。")])},function(){var e=this.$createElement,r=this._self._c||e;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("docker run -v /Users/wsargent/myapp/src:/src\n")])])])},function(){var e=this.$createElement,r=this._self._c||e;return r("h2",{attrs:{id:"暴露端口-exposing-ports"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#暴露端口-exposing-ports","aria-hidden":"true"}},[this._v("#")]),this._v(" 暴露端口(Exposing ports)")])},function(){var e=this.$createElement,r=this._self._c||e;return r("p",[this._v("这种方式可以将容器端口映射到宿主端口上(只使用本地主机(localhost)接口)，通过使用 "),r("code",[this._v("-p")]),this._v(":")])},function(){var e=this.$createElement,r=this._self._c||e;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("docker run -p 127.0.0.1:$HOSTPORT:$CONTAINERPORT --name CONTAINER -t someimage\n")])])])},function(){var e=this.$createElement,r=this._self._c||e;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("EXPOSE <CONTAINERPORT>\n")])])])},function(){var e=this.$createElement,r=this._self._c||e;return r("p",[this._v("但是注意 EXPOSE 并不会暴露端口，你需要用参数 "),r("code",[this._v("-p")]),this._v(" 。比如说你要在 localhost 上暴露容器的端口:")])},function(){var e=this.$createElement,r=this._self._c||e;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("iptables -t nat -A DOCKER -p tcp --dport <LOCALHOSTPORT> -j DNAT --to-destination <CONTAINERIP>:<PORT>\n")])])])},function(){var e=this.$createElement,r=this._self._c||e;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|\n  ...\n\n  (49000..49900).each do |port|\n    config.vm.network :forwarded_port, :host => port, :guest => port\n  end\n\n  ...\nend\n")])])])},function(){var e=this.$createElement,r=this._self._c||e;return r("p",[this._v("如果你忘记你将什么端口映射到宿主容器上的话，使用 "),r("code",[this._v("docker port")]),this._v(" 来查看它:")])},function(){var e=this.$createElement,r=this._self._c||e;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("docker port CONTAINER $CONTAINERPORT\n")])])])},function(){var e=this.$createElement,r=this._self._c||e;return r("h2",{attrs:{id:"最佳实践"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#最佳实践","aria-hidden":"true"}},[this._v("#")]),this._v(" 最佳实践")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h2",{attrs:{id:"安全-security"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#安全-security","aria-hidden":"true"}},[this._v("#")]),this._v(" 安全(Security)")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h3",{attrs:{id:"安全提示"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#安全提示","aria-hidden":"true"}},[this._v("#")]),this._v(" 安全提示")])},function(){var e=this.$createElement,r=this._self._c||e;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("docker run --pids-limit=64\n")])])])},function(){var e=this.$createElement,r=this._self._c||e;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("docker run --security-opt=no-new-privileges\n")])])])},function(){var e=this.$createElement,r=this._self._c||e;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("docker -d --icc=false --iptables\n")])])])},function(){var e=this.$createElement,r=this._self._c||e;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("docker run --read-only\n")])])])},function(){var e=this.$createElement,r=this._self._c||e;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("docker pull debian@sha256:a25306f3850e1bd44541976aa7b5fd0a29be\n")])])])},function(){var e=this.$createElement,r=this._self._c||e;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("docker run -v $(pwd)/secrets:/secrets:ro debian\n")])])])},function(){var e=this.$createElement,r=this._self._c||e;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("RUN groupadd -r user && useradd -r -g user user\nUSER user\n")])])])},function(){var e=this.$createElement,r=this._self._c||e;return r("h3",{attrs:{id:"用户命名空间-user-namespaces"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#用户命名空间-user-namespaces","aria-hidden":"true"}},[this._v("#")]),this._v(" 用户命名空间(User Namespaces)")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h3",{attrs:{id:"安全相关视频"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#安全相关视频","aria-hidden":"true"}},[this._v("#")]),this._v(" 安全相关视频")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h3",{attrs:{id:"安全路线图"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#安全路线图","aria-hidden":"true"}},[this._v("#")]),this._v(" 安全路线图")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h2",{attrs:{id:"小贴士"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#小贴士","aria-hidden":"true"}},[this._v("#")]),this._v(" 小贴士")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h3",{attrs:{id:"最后的-ids"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#最后的-ids","aria-hidden":"true"}},[this._v("#")]),this._v(" 最后的 Ids")])},function(){var e=this.$createElement,r=this._self._c||e;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("alias dl='docker ps -l -q'\ndocker run ubuntu echo hello world\ndocker commit `dl` helloworld\n")])])])},function(){var e=this.$createElement,r=this._self._c||e;return r("h3",{attrs:{id:"带命令行的提交-需要-dockerfile"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#带命令行的提交-需要-dockerfile","aria-hidden":"true"}},[this._v("#")]),this._v(" 带命令行的提交 (需要 Dockerfile)")])},function(){var e=this.$createElement,r=this._self._c||e;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v('docker commit -run=\'{"Cmd":["postgres", "-too -many -opts"]}\' `dl` postgres\n')])])])},function(){var e=this.$createElement,r=this._self._c||e;return r("h3",{attrs:{id:"获取-ip-地址"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#获取-ip-地址","aria-hidden":"true"}},[this._v("#")]),this._v(" 获取 IP 地址")])},function(){var e=this.$createElement,r=this._self._c||e;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("docker inspect `dl` | grep IPAddress | cut -d '\"' -f 4\n")])])])},function(){var e=this.$createElement,r=this._self._c||e;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("docker inspect `dl` | jq -r '.[0].NetworkSettings.IPAddress'\n")])])])},function(){var e=this.$createElement,r=this._self._c||e;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("docker inspect -f '{{ .NetworkSettings.IPAddress }}' <container_name>\n")])])])},function(){var e=this.$createElement,r=this._self._c||e;return r("h3",{attrs:{id:"获取端口映射"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#获取端口映射","aria-hidden":"true"}},[this._v("#")]),this._v(" 获取端口映射")])},function(){var e=this.$createElement,r=this._self._c||e;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("docker inspect -f '{{range $p, $conf := .NetworkSettings.Ports}} {{$p}} -> {{(index $conf 0).HostPort}} {{end}}' <containername>\n")])])])},function(){var e=this.$createElement,r=this._self._c||e;return r("h3",{attrs:{id:"通过正则获取容器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#通过正则获取容器","aria-hidden":"true"}},[this._v("#")]),this._v(" 通过正则获取容器")])},function(){var e=this.$createElement,r=this._self._c||e;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v('for i in $(docker ps -a | grep "REGEXP_PATTERN" | cut -f1 -d" "); do echo $i; done`\n')])])])},function(){var e=this.$createElement,r=this._self._c||e;return r("h3",{attrs:{id:"获取环境设定"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#获取环境设定","aria-hidden":"true"}},[this._v("#")]),this._v(" 获取环境设定")])},function(){var e=this.$createElement,r=this._self._c||e;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("docker run --rm ubuntu env\n")])])])},function(){var e=this.$createElement,r=this._self._c||e;return r("h3",{attrs:{id:"强迫关闭正在运行的容器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#强迫关闭正在运行的容器","aria-hidden":"true"}},[this._v("#")]),this._v(" 强迫关闭正在运行的容器")])},function(){var e=this.$createElement,r=this._self._c||e;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("docker kill $(docker ps -q)\n")])])])},function(){var e=this.$createElement,r=this._self._c||e;return r("h3",{attrs:{id:"删除旧容器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#删除旧容器","aria-hidden":"true"}},[this._v("#")]),this._v(" 删除旧容器")])},function(){var e=this.$createElement,r=this._self._c||e;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("docker ps -a | grep 'weeks ago' | awk '{print $1}' | xargs docker rm\n")])])])},function(){var e=this.$createElement,r=this._self._c||e;return r("h3",{attrs:{id:"删除停止容器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#删除停止容器","aria-hidden":"true"}},[this._v("#")]),this._v(" 删除停止容器")])},function(){var e=this.$createElement,r=this._self._c||e;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("docker rm -v `docker ps -a -q -f status=exited`\n")])])])},function(){var e=this.$createElement,r=this._self._c||e;return r("h3",{attrs:{id:"删除-dangling-镜像"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#删除-dangling-镜像","aria-hidden":"true"}},[this._v("#")]),this._v(" 删除 dangling 镜像")])},function(){var e=this.$createElement,r=this._self._c||e;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("docker rmi $(docker images -q -f dangling=true)\n")])])])},function(){var e=this.$createElement,r=this._self._c||e;return r("h3",{attrs:{id:"删除所有镜像"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#删除所有镜像","aria-hidden":"true"}},[this._v("#")]),this._v(" 删除所有镜像")])},function(){var e=this.$createElement,r=this._self._c||e;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("docker rmi $(docker images -q)\n")])])])},function(){var e=this.$createElement,r=this._self._c||e;return r("h3",{attrs:{id:"删除-dangling-卷标"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#删除-dangling-卷标","aria-hidden":"true"}},[this._v("#")]),this._v(" 删除 dangling 卷标")])},function(){var e=this.$createElement,r=this._self._c||e;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("docker volume rm $(docker volume ls -q -f dangling=true)\n")])])])},function(){var e=this.$createElement,r=this._self._c||e;return r("p",[this._v("1.9.0 中，过滤器 "),r("code",[this._v("dangling=false")]),this._v(" 居然 "),r("em",[this._v("没")]),this._v(" 用 - 它会被忽略然后列出所有的卷标。")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h3",{attrs:{id:"查看镜像依赖"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#查看镜像依赖","aria-hidden":"true"}},[this._v("#")]),this._v(" 查看镜像依赖")])},function(){var e=this.$createElement,r=this._self._c||e;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("docker images -viz | dot -Tpng -o docker.png\n")])])])},function(){var e=this.$createElement,r=this._self._c||e;return r("ul",[r("li",[this._v("在当前运行层(RUN layer)清理 APT")])])},function(){var e=this.$createElement,r=this._self._c||e;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("RUN {apt commands} \\\n  && apt-get clean \\  \n  && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n")])])])},function(){var e=this.$createElement,r=this._self._c||e;return r("ul",[r("li",[this._v("压缩镜像")])])},function(){var e=this.$createElement,r=this._self._c||e;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("ID=$(docker run -d image-name /bin/bash)\ndocker export $ID | docker import – flat-image-name\n")])])])},function(){var e=this.$createElement,r=this._self._c||e;return r("ul",[r("li",[this._v("备份")])])},function(){var e=this.$createElement,r=this._self._c||e;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("ID=$(docker run -d image-name /bin/bash)\n(docker export $ID | gzip -c > image.tgz)\ngzip -dc image.tgz | docker import - flat-image-name\n")])])])},function(){var e=this.$createElement,r=this._self._c||e;return r("h3",{attrs:{id:"监视运行中容器的系统资源利用率"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#监视运行中容器的系统资源利用率","aria-hidden":"true"}},[this._v("#")]),this._v(" 监视运行中容器的系统资源利用率")])},function(){var e=this.$createElement,r=this._self._c||e;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("docker stats <container>\n")])])])},function(){var e=this.$createElement,r=this._self._c||e;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("docker stats $(docker ps -q)\n")])])])},function(){var e=this.$createElement,r=this._self._c||e;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("docker stats $(docker ps --format '{{.Names}}')\n")])])])},function(){var e=this.$createElement,r=this._self._c||e;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("docker ps -a -f ancestor=ubuntu\n")])])])}],!1,null,null,null);r.default=a.exports}}]);